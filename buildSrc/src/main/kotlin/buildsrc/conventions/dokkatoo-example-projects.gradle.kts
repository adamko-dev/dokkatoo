package buildsrc.conventions

import buildsrc.conventions.Maven_publish_test_gradle.MavenPublishTest
import buildsrc.tasks.SetupDokkaProjects

plugins {
  id("buildsrc.conventions.base")
  id("buildsrc.conventions.dokka-source-downloader")
  id("buildsrc.conventions.maven-publish-test")
  id("buildsrc.conventions.dokkatoo-example-projects-base")
}


val prepareDokkaSourceTask = tasks.named<Sync>("prepareDokkaSource")

val setupDokkaTemplateProjects by tasks.registering(SetupDokkaProjects::class) {
  dependsOn(prepareDokkaSourceTask)
  destinationToSources.convention(emptyMap())
  dokkaSourceDir.set(
    layout.dir(
      prepareDokkaSourceTask.map { it.destinationDir }
    )
  )
}

val mavenPublishTestExtension = extensions.getByType<MavenPublishTest>()

val updateGradlePropertiesInDokkatooExamples by tasks.registering {
  group = "dokkatoo examples"

  mustRunAfter(tasks.withType<SetupDokkaProjects>())

  val gradlePropertiesFiles =
    layout.projectDirectory.asFileTree
      .matching {
        include(
          "**/*dokkatoo*/settings.gradle.kts",
          "**/*dokkatoo*/settings.gradle",
        )
      }.elements.map { settingsFiles ->
        settingsFiles.map {
          it.asFile.resolveSibling("gradle.properties")
        }
      }

  outputs.files(gradlePropertiesFiles)

  val testMavenRepoPath = mavenPublishTestExtension.testMavenRepo.map {
    it.asFile.invariantSeparatorsPath
  }
  inputs.property("testMavenRepoPath", testMavenRepoPath)

  doLast task@{
    gradlePropertiesFiles.get().forEach {
      it.writeText(
        """
          |# DO NOT EDIT - Generated by ${this@task.path}
          |
          |testMavenRepo=${testMavenRepoPath.get()}
          |
        """.trimMargin()
      )
    }
  }
}

tasks.assemble {
  dependsOn(setupDokkaTemplateProjects)
  dependsOn(updateGradlePropertiesInDokkatooExamples)
}
