package dev.adamko.dokkatoo.tasks

import dev.adamko.dokkatoo.internal.DokkaPluginParametersContainer
import dev.adamko.dokkatoo.internal.DokkatooInternalApi
import javax.inject.Inject
import org.gradle.api.file.ArchiveOperations
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.FileSystemOperations
import org.gradle.api.model.ObjectFactory
import org.gradle.api.tasks.*
import org.gradle.api.tasks.PathSensitivity.RELATIVE
import org.gradle.workers.WorkerExecutor


/**
 * Generate a complete Dokka Publication.
 *
 * A Publication may contain zero-to-many Dokka Modules, which are generated by
 * [DokkatooGenerateModuleTask].
 */
@CacheableTask
abstract class DokkatooGeneratePublicationTask
@DokkatooInternalApi
@Inject
constructor(
  objects: ObjectFactory,
  workers: WorkerExecutor,
  private val fs: FileSystemOperations,
  archives: ArchiveOperations,

  /**
   * Configurations for Dokka Generator Plugins. Must be provided from
   * [dev.adamko.dokkatoo.dokka.DokkaPublication.pluginsConfiguration].
   */
  pluginsConfiguration: DokkaPluginParametersContainer,
) : DokkatooGenerateTask2(
  objects = objects,
  workers = workers,
  fs = fs,
  archives = archives,
  pluginsConfiguration = pluginsConfiguration,
) {

  @get:OutputDirectory
  abstract val outputDirectory: DirectoryProperty

  /** Dokka Modules directories, each containing a rendered Dokka Module. */
  @get:InputFiles
  @get:PathSensitive(RELATIVE)
  abstract val dokkaModuleDirectories: ConfigurableFileCollection

  @TaskAction
  internal fun generatePublication() {
    val outputDirectory = outputDirectory.get().asFile

    val generator = dokkaGeneratorWorker()

    // clean output dir, so previous generations don't dirty this generation
    fs.delete { delete(outputDirectory) }
    outputDirectory.mkdirs()

    // run Dokka Generator
    generator.generatePublication(
      parameters = generatorParameters,
      dokkaModuleDirectories = dokkaModuleDirectories.files,
      outputDirectory = outputDirectory,
    )
  }
}
